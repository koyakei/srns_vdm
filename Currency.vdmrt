class Currency -- 通貨
	
types
	public transmittingRule = <TransmittingRule>;

values
private relation = new Relation();
instance variables
	public id : nat;
	public static global : GLOBAL := new GLOBAL();
	public currencyName : seq of char; -- しばらくはIDと兼用にする。
	private rootUserSet :  set of User;
	public puclishingUser : set of User;
	public unitName: seq of char; -- 一応作るけどテストしない。
	public static relationList : set of Relation :={};
	public transmittingRuleList : seq of TransmittingRule :=[];
	public static currencyRightList : set of CurrencyRight :={};
	public changeRelationRequest : seq of CurrencyRight :=[];
	public static trasmittingRules : set of TransmittingRule :={}
	
operations
public Currency : seq of char * seq of char ==> Currency
Currency(name, unit_name) ==
	(
	currencyName := name;
	unitName := unit_name;
	);
--通貨消滅
--public deleteCurrency: (Currency) ==> ()
--deleteCurrency (currency) == 
--	trap <FAILURE>
--		with
--			exit <FAILURE> -- 失敗を返す
--		in
--			-- atomic
--			(
--			-- 関係性の削除
--			(relationList := deleteAllCurrencyRelation(relationList));
--
--			);
--
--  public deleteAllCurrencyRelations: seq of CurrencyRight ==> ()
--  deleteAllCurrencyRelations (relationList) ==
--  for all relation in set CurrencyRight do
--  	relation := [];
  
-- 最もメタ的な移動ルール
-- 関係性付与
	public MakeRelation: (nat) ==> ()
	MakeRelation(rId) ==
		(
			relationList := relationList union {CreateRelationFromRelationRequests(rId, 1,2,3)};
		);
	
	public CreateRelationFromRelationRequests: nat * nat * nat * nat ==> Relation
	CreateRelationFromRelationRequests(rId, fromId, toId, triId) ==
		(
			return new Relation(rId, toId, fromId, triId);
		);
	
-- 関係性解消
	public static DeleteRelation: (nat) ==> ()
	DeleteRelation(rId) ==
		(
			relationList := relationList \ {relation};
		);
		
	public GetRelationById:(nat) ==> Relation
	GetRelationById(rId) ==
		(
		-- dinter のOvertuneIDEでの挙動がおかしいらしい。https://github.com/overturetool/overture/issues/689
--			if relationList subset {relation} then dinter {relationList, , {NewRelationById(rId)}}}
--			else exit <NO_RELATTION>
			return new Relation(rId)
		);
		
-- 移動ルールの設定
-- 移動ルールを設定してお金を作る　作れたらベクトルをquantityに持つ通貨を作る
	public SetTransmittingRule: TransmittingRule ==> ()
	SetTransmittingRule(rule) ==
	 trasmittingRules := trasmittingRules union {rule};
	
-- 移動ルールの消去
	public DeleteTransmittingRule: TransmittingRule ==> ()
	DeleteTransmittingRule(rule) ==
	 trasmittingRules :=  trasmittingRules \ {rule};
--
---- 移動ルールを使用した関係性の変化 移動ルールは基礎的な部分はハードコード
---- 動的な部分は後回し。
--	public TransmitCurrencyWithRule: () ==> bool
--	TransmitCurrencyWithRule(rule,targetRelationCondition) ==
--	updateRelationList(targetRelationCondition);
--	
--	-- rule を継承しながら記述する方法
--	public AddRule:() ==> bool
--	AddRule (rule) == 
--	(transmittingRule := currency.ruleList union {rule};);
--	
--	public static addRelationList: RelationConditon ==> bool
--	addRelationList(addRelationRequest) == is subclass responsibility;
--	
--	public static updateRelationList: RelationConditon ==> bool
--	updateRelationList(targetRelationCondition) ==
--		(if targetRelationCondition.id <> null -- relation のバリデーションチェック
--		then	(relationList := relationList :-> {relation});
--		); -- relation を追加
--		
--functions
--	private IsFitForCurrencyPolicy: UpdateCurrencyRelation -> bool
--	IsFitForCurrencyPolicy () == is subclass responsibility;

---- logger はcloud watch などで外部取得するが簡易的に仕様にも設置する。
--	private static logger : () -> bool
--	logger(array)  ==
--		-- 入ってきた配列に増減と変更があったら全部記録するぞ
--		log = log ++ {row};
--	-- relationId だと、細かく指定しなければ削除できない。
--	-- 条件指定　誰が持ってていくらあげる　下げる
--	-- exchange じゃなくて update にしたのは、 rails の　CURDの原則に従う命名だから。

	public static createCurrencyRight: RelationConditon ==> ()
	createCurrencyRight(changeRelationRequests) ==
		currencyRightList := currencyRightList union {new CurrencyRight(0, global.ROOT_USER, new Quantity())};
		
--	public static isFitForExchangeRule : seq of CurrencyRight -> bool
--	isFitForExchangeRule(changeRelationRequest) == is subclass responsibility;
--		
traces
-- TODO Define Combinatorial Test Traces here
end Currency